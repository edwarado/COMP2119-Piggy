#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <string>
#include <bits/stdc++.h>

using namespace std;

int a = 0;
int tf=0;
int b=0;
int tem1 = 7;
int n=8;
int cards[99] = {};
int cardbullhead[99] = {};
int player1[8] = {};
int player2[8] = {};
int player3[8] = {};
int player4[8] = {};
int row1[6] = {};
int row2[6] = {};
int row3[6] = {};
int row4[6] = {};

/*
void initialrow(int row[]){
  for (int i=0;i<6;i++){
    row[i]=0;
  }
  return;
}
*/


void printrow(int row[]){
  for (int i=0;i<n;i++){
    if (row[i] != 0){
      cout<<row[i]<<"  ";
    }
  }
  cout<<endl;
  return;
}

void printplayer(int player[]){
  for (int i=0;i<n;i++){
    if (player[i] != 0){
    cout<<player[i]<<"  ";
  }
  }
  cout<<endl;
  return;
}

int lastcardrow(int row[]){
  int x=0;
  for (int i=0;i<n;i++){
    if (row[i] != 0){
      x = row[i];
    }
  }
  return x;
}

int returnplayerlength(int x, int player[]){
  for (int i=0;i<n;i++){
    if (player[i]==x){
      return i;
    }
  }
  return 0;
}

int smallestdiffplayer(int player[]){
  int x = 1000, y = 0, tf=0;
  for (int i=0;i<n;i++){
    for (int j=0;j<n;j++){
      if (player[j]>lastcardrow(row1) or player[j]>lastcardrow(row2) or player[j]>lastcardrow(row3) or player[j]>lastcardrow(row4)){
        tf=1;
      }
    }
      if (tf==0){
        return player[0];
      }

      if (player[i]-lastcardrow(row1)<=x && player[i]>lastcardrow(row1)){
        x = player[i]-lastcardrow(row1);
        y = player[i];
      }
      if (player[i]-lastcardrow(row2)<=x && player[i]>lastcardrow(row2)){
        x = player[i]-lastcardrow(row2);
        y = player[i];
      }
      if (player[i]-lastcardrow(row3)<=x && player[i]>lastcardrow(row3)){
        x = player[i]-lastcardrow(row3);
        y = player[i];
      }
      if (player[i]-lastcardrow(row4)<=x && player[i]>lastcardrow(row4)){
        x = player[i]-lastcardrow(row4);
        y = player[i];
      }            
  }
  return y;
}


int returnrowlastcardlength(int row[]){
  int y=0;
  for (int i=0;i<n;i++){
    if (row[i] != 0){
      y=i;
    }
  } 
  return y;
} 


int returnplayercardpos(int x, int player[]){
  int a=0;
  for (int i=0;i<n;i++){
    if (player[i] == x){
      a=i;
      return i;
    }
  }
  return a;
}

void putcards(int x){
  int y=100;
  if (x-lastcardrow(row1)<0 && x-lastcardrow(row2)<0 && x-lastcardrow(row3)<0 && x-lastcardrow(row4)<0){
    row1[0]=x;
    for (int i=1;i<8;i++){
      row1[i]=0;
    }
    return;
  }
  if (x-lastcardrow(row1)<=y && x-lastcardrow(row1)>=0){
    y = x-lastcardrow(row1);
  }
  if (x-lastcardrow(row2)<=y && x-lastcardrow(row2)>=0){
    y = x-lastcardrow(row2);
  }
  if (x-lastcardrow(row3)<=y && x-lastcardrow(row3)>=0){
    y = x-lastcardrow(row3);
  }
  if (x-lastcardrow(row4)<=y && x-lastcardrow(row4)>=0){
    y = x-lastcardrow(row4);
  }
  if (y==x-lastcardrow(row1)){  
    row1[returnrowlastcardlength(row1)+1]=x;
    if (row1[4] != 0){
      row1[0]=x;
      for (int i=1; i<tem1;i++){
        row1[i]=0;
    }
    }
  }
  if (y==x-lastcardrow(row2)){  
    row2[returnrowlastcardlength(row2)+1]=x;
    if (row2[4] != 0){
      row2[0]=x;
      for (int i=1; i<tem1;i++){
        row2[i]=0;
    }
    }
  }
  if (y==x-lastcardrow(row3)){  
    row3[returnrowlastcardlength(row3)+1]=x;
    if (row3[4] != 0){
      row3[0]=x;
      for (int i=1; i<tem1;i++){
        row3[i]=0;
    }
    }
  }
  if (y==x-lastcardrow(row4)){  
    row4[returnrowlastcardlength(row4)+1]=x;
    if (row4[4] != 0){
      row4[0]=x;
      for (int i=1; i<tem1;i++){
        row4[i]=0;
    }
    }
  }
}

int firstsmall(int aa, int bb, int cc, int dd){
  int arr[4]={aa,bb,cc,dd};
  sort(arr, arr+4); 
  cout<<"The play order: "<<arr[0];
  return arr[0];
}

int secondsmall(int aa, int bb, int cc, int dd){
  int arr[4]={aa,bb,cc,dd};
  sort(arr, arr+4); 
  cout<<" -> "<< arr[1];
  return arr[1];
}

int thirdsmall(int aa, int bb, int cc, int dd){
  int arr[4]={aa,bb,cc,dd};
  sort(arr, arr+4); 
  cout<<" -> "<< arr[2];
  return arr[2];
}

int fourthsmall(int a, int b, int c, int d){
  int arr[4]={a,b,c,d};
  sort(arr, arr+4); 
  cout<<" -> "<< arr[3]<<endl;
  return arr[3];
}

int main() {
  int aaa=0,bbb=0,ccc=0,ddd=0;

  for(int i=0;i<99;i++){
    cards[i]=i+1;
  }

  srand(time(NULL));
  
  for (int j=0;j<5000;j++){
    int x=rand()%99;
    int y=rand()%99;
    a = cards[x];
    cards[x]=cards[y];
    cards[y]=a;
  }

  for (int i=0;i<8;i++){
    player1[i]=cards[i+2];
  }

  for (int i=0;i<8;i++){
    player2[i]=cards[i+20];
  }

  for (int i=0;i<8;i++){
    player3[i]=cards[i+30];
  }

  for (int i=0;i<8;i++){
    player4[i]=cards[i+40];
  }
  
  row1[0]=cards[60];
  row2[0]=cards[61];
  row3[0]=cards[62];
  row4[0]=cards[63];

  cout<<"Welcome to the game - PIGGY"<<endl;
  cout<<"Hope You Will Enjoy Playing it"<<endl;

  sort(player1, player1+8);
  sort(player2, player2+8);
  sort(player3, player3+8);
  sort(player4, player4+8);

  for (int k=0;k<8;k++){
  cout<<endl;

  printrow(row1);
  printrow(row2);
  printrow(row3);
  printrow(row4);

  cout<<endl;
  cout<<endl;

  cout<<"These are your cards!!"<<endl;
  printplayer(player1);
  cout<<"Player 2!!"<<endl;
  printplayer(player2);
  cout<<"Player 3!!"<<endl;
  printplayer(player3);
  cout<<"Player 4!!"<<endl;
  printplayer(player4);
  cout<<endl;
  cout<<"Choose one card from your hand!!"<<endl;

  cin>>b;
  aaa=smallestdiffplayer(player2);
  bbb=smallestdiffplayer(player3);
  ccc=smallestdiffplayer(player4);
  cout<<"-----------------------------------------------------------------"<<endl;
  cout<<"You play -> "<<b<<endl;
  cout<<"Player 2 play -> "<<aaa<<endl;
  cout<<"Player 3 play -> "<<bbb<<endl;
  cout<<"Player 4 play -> "<<ccc<<endl;

  putcards(firstsmall(b, aaa,bbb,ccc));

  putcards(secondsmall(b, aaa,bbb,ccc));

  putcards(thirdsmall(b, aaa,bbb,ccc));

  putcards(fourthsmall(b, aaa,bbb,ccc));

  cout<<endl;


  for (int y=returnplayercardpos(b, player1); y<tem1; y++){
    player1[y]=player1[y+1];
  }
  for (int y=returnplayercardpos(aaa, player2); y<tem1; y++){
    player2[y]=player2[y+1];
  }
  for (int y=returnplayercardpos(bbb, player3); y<tem1; y++){
    player3[y]=player3[y+1];
  }
  for (int y=returnplayercardpos(ccc, player4); y<tem1; y++){
    player4[y]=player4[y+1];
  }

  player1[tem1]=0;
  player2[tem1]=0;
  player3[tem1]=0;
  player4[tem1]=0;

  tem1=tem1-1;
  n=n-1;
}

}